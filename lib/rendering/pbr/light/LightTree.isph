// Copyright 2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include <scene_rdl2/common/platform/Platform.isph>

#include "Light.isph"
#include "LightTree.hh"
#include "LightTreeUtil.isph"

// =====================================================================================================================
// References:
// =====================================================================================================================
// [1] Alejandro Conty Estevez and Christopher Kulla. 2018. 
//     "Importance Sampling of Many Lights with Adaptive Tree Splitting"
// =====================================================================================================================


struct LightTree
{
    LIGHT_TREE_MEMBERS;
};

inline void LightTree_chooseLight(varying float * uniform lightSelectionPdfs, const varying int lightIndex, 
                                  const varying float pdf, const uniform int * uniform lightIdMap)
{
    if (lightIndex < 0) {
        return;
    }
    // Convert light index into the light set's index. If it's -1, it means that 
    // light has been culled, and therefore is not in the set
    const varying int visibleLightIndex = lightIdMap[lightIndex];
    if (visibleLightIndex >= 0) {
        lightSelectionPdfs[visibleLightIndex] = pdf;
    }
}

/// Chooses light(s) using importance sampling and adaptive tree splitting [1] (Section 5.4).
///
/// OUTPUTS:
///     @param lightSelectionPdfs A list of light selection probabilities, saved to the associated light's index.
///                               Any pdf of -1 indicates that the light was not chosen (default).
///
void LightTree_sample(const uniform LightTree * const uniform me,
                      varying float * uniform lightSelectionPdfs,
                      const varying Vec3f& P, 
                      const varying Vec3f& N, 
                      const varying Vec3f* cullingNormal,
                      const varying IntegratorSample1D& lightSelectionSample,
                      const uniform int * uniform lightIdMap);

/// Choose a light from the hierarchy using importance sampling. We traverse the hierarchy by using a random number, 
/// r, to determine which subtree to traverse. Each subtree (node) has an associated importance weight which 
/// determines the probability of choosing one node over another. 
/// @see [1] eq (5)
///
/// NOTABLE INPUTS:
///     @param nodeIndex The current node of the tree
///
/// OUTPUTS:
///     @param lightIndex The index of the light we selected
///     @param pdf The probability of selecting that light
///     @param r The random number used to determine the subtree to traverse, rescaled in each iteration
///
void LightTree_sampleBranch(const uniform LightTree * const uniform me,
                            varying int& lightIndex, 
                            varying float& pdf, 
                            varying float& r, 
                            uniform uint32_t nodeIndex, 
                            const varying Vec3f& p, 
                            const varying Vec3f& n,
                            varying bool cullLights);

/// Recursive function that chooses light(s) to sample, using adaptive tree splitting and a user-specified quality 
/// control. This quality control, mSamplingQuality, is a threshold [0, 1] that determines whether we traverse both 
/// subtrees or stop traversing and choose a light using importance sampling. When mSamplingQuality is closer to 0.0, 
/// fewer lights will be sampled, and when it is closer to 1.0, more lights will be sampled. 
///
/// @see [1] (Section 5.4)
///
/// NOTABLE INPUTS:
///     @param lightSelectionSample Random number sequence we use when selecting a light
///     @param nodeIndices The current node(s) we are traversing (we explore both branches)
///
/// OUTPUTS:
///     @param lightSelectionPdfs A list of light selection pdfs, where the pdf is stored in the corresponding 
///                               light's index. Any lights not chosen will have a pdf of -1.
///
void LightTree_sampleRecurse(const uniform LightTree * const uniform me,
                             varying float * uniform lightSelectionPdfs,
                             uniform int nodeIndices[2],
                             const varying Vec3f& p,
                             const varying Vec3f& n,
                             varying bool cullLights,
                             const varying IntegratorSample1D& lightSelectionSample,
                             const uniform int * uniform lightIdMap);

/// Print the tree
void LightTree_print(const uniform LightTree * const uniform lightTree);

/// Recursively print the tree
void LightTree_printRecurse(const uniform LightTree * const uniform lightTree, uniform uint32_t nodeIndex, uniform int depth);

